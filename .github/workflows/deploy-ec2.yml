name: Deploy to EC2 (Docker)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/projeto-filmes-backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/projeto-filmes-frontend:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/filmes

            # Cria/atualiza o arquivo docker-compose de produção
            cat <<EOF > docker-compose.prod.yml
            version: '3.8'

            services:
              backend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/projeto-filmes-backend:latest
                restart: always
                env_file:
                  - backend.env
                networks:
                  - app-network

              frontend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/projeto-filmes-frontend:latest
                restart: always
                ports:
                  - "80:80"
                depends_on:
                  - backend
                networks:
                  - app-network

            networks:
              app-network:
                driver: bridge
            EOF

            # Puxa as imagens mais recentes do Docker Hub
            docker compose -f docker-compose.prod.yml pull

            # Sobe os containers em modo detached (segundo plano)
            docker compose -f docker-compose.prod.yml up -d